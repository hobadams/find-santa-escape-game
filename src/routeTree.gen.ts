/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GameImport } from './routes/game'
import { Route as GameStepStepIndexImport } from './routes/game/step/$step/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const GameIndexLazyImport = createFileRoute('/game/')()
const GameIntroIndexLazyImport = createFileRoute('/game/intro/')()

// Create/Update Routes

const GameRoute = GameImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const GameIndexLazyRoute = GameIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GameRoute,
} as any).lazy(() => import('./routes/game/index.lazy').then((d) => d.Route))

const GameIntroIndexLazyRoute = GameIntroIndexLazyImport.update({
  id: '/intro/',
  path: '/intro/',
  getParentRoute: () => GameRoute,
} as any).lazy(() =>
  import('./routes/game/intro/index.lazy').then((d) => d.Route),
)

const GameStepStepIndexRoute = GameStepStepIndexImport.update({
  id: '/step/$step/',
  path: '/step/$step/',
  getParentRoute: () => GameRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameImport
      parentRoute: typeof rootRoute
    }
    '/game/': {
      id: '/game/'
      path: '/'
      fullPath: '/game/'
      preLoaderRoute: typeof GameIndexLazyImport
      parentRoute: typeof GameImport
    }
    '/game/intro/': {
      id: '/game/intro/'
      path: '/intro'
      fullPath: '/game/intro'
      preLoaderRoute: typeof GameIntroIndexLazyImport
      parentRoute: typeof GameImport
    }
    '/game/step/$step/': {
      id: '/game/step/$step/'
      path: '/step/$step'
      fullPath: '/game/step/$step'
      preLoaderRoute: typeof GameStepStepIndexImport
      parentRoute: typeof GameImport
    }
  }
}

// Create and export the route tree

interface GameRouteChildren {
  GameIndexLazyRoute: typeof GameIndexLazyRoute
  GameIntroIndexLazyRoute: typeof GameIntroIndexLazyRoute
  GameStepStepIndexRoute: typeof GameStepStepIndexRoute
}

const GameRouteChildren: GameRouteChildren = {
  GameIndexLazyRoute: GameIndexLazyRoute,
  GameIntroIndexLazyRoute: GameIntroIndexLazyRoute,
  GameStepStepIndexRoute: GameStepStepIndexRoute,
}

const GameRouteWithChildren = GameRoute._addFileChildren(GameRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/game': typeof GameRouteWithChildren
  '/game/': typeof GameIndexLazyRoute
  '/game/intro': typeof GameIntroIndexLazyRoute
  '/game/step/$step': typeof GameStepStepIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/game': typeof GameIndexLazyRoute
  '/game/intro': typeof GameIntroIndexLazyRoute
  '/game/step/$step': typeof GameStepStepIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/game': typeof GameRouteWithChildren
  '/game/': typeof GameIndexLazyRoute
  '/game/intro/': typeof GameIntroIndexLazyRoute
  '/game/step/$step/': typeof GameStepStepIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game' | '/game/' | '/game/intro' | '/game/step/$step'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game' | '/game/intro' | '/game/step/$step'
  id:
    | '__root__'
    | '/'
    | '/game'
    | '/game/'
    | '/game/intro/'
    | '/game/step/$step/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  GameRoute: typeof GameRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  GameRoute: GameRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/game": {
      "filePath": "game.tsx",
      "children": [
        "/game/",
        "/game/intro/",
        "/game/step/$step/"
      ]
    },
    "/game/": {
      "filePath": "game/index.lazy.tsx",
      "parent": "/game"
    },
    "/game/intro/": {
      "filePath": "game/intro/index.lazy.tsx",
      "parent": "/game"
    },
    "/game/step/$step/": {
      "filePath": "game/step/$step/index.tsx",
      "parent": "/game"
    }
  }
}
ROUTE_MANIFEST_END */
